// This file was automatically generated by Namespace.
// DO NOT EDIT. To update, re-run `ns generate`.

package global

import (
	"context"
	metric1 "go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/sdk/metric"
	"go.opentelemetry.io/otel/trace"
	"namespacelabs.dev/foundation/std/go/core"
	"namespacelabs.dev/foundation/std/monitoring/tracing"
)

// Dependencies that are instantiated once for the lifetime of the extension.
type ExtensionDeps struct {
	MeterProvider  *metric.MeterProvider
	TracerProvider tracing.DeferredTracerProvider
}

type _checkProvideMeter func(context.Context, *NoArgs, ExtensionDeps) (metric1.Meter, error)

var _ _checkProvideMeter = ProvideMeter

type _checkProvideTracer func(context.Context, *NoArgs, ExtensionDeps) (trace.Tracer, error)

var _ _checkProvideTracer = ProvideTracer

var (
	Package__48n3d1 = &core.Package{
		PackageName: "namespacelabs.dev/foundation/std/monitoring/tracing/global",
	}

	Provider__48n3d1 = core.Provider{
		Package:     Package__48n3d1,
		Instantiate: makeDeps__48n3d1,
	}
)

func makeDeps__48n3d1(ctx context.Context, di core.Dependencies) (_ interface{}, err error) {
	var deps ExtensionDeps

	if err := di.Instantiate(ctx, tracing.Provider__70o2mm, func(ctx context.Context, v interface{}) (err error) {
		if deps.MeterProvider, err = tracing.ProvideMeterProvider(ctx, nil, v.(tracing.ExtensionDeps)); err != nil {
			return err
		}
		return nil
	}); err != nil {
		return nil, err
	}

	if err := di.Instantiate(ctx, tracing.Provider__70o2mm, func(ctx context.Context, v interface{}) (err error) {
		if deps.TracerProvider, err = tracing.ProvideTracerProvider(ctx, nil, v.(tracing.ExtensionDeps)); err != nil {
			return err
		}
		return nil
	}); err != nil {
		return nil, err
	}

	return deps, nil
}
